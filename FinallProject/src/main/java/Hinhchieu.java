
import java.awt.Color;
import java.awt.geom.Area;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author MyPC
 */
public class Hinhchieu extends javax.swing.JFrame {

    /**
     * Creates new form Hinhchieu
     */
    ArrayList<Camera> listcam;
    ArrayList<Obstacle> listvat;
    Room r;
    ArrayList<Area> areavLtoR = new ArrayList<Area>();
    ArrayList<Area> areavRtoL = new ArrayList<Area>();
    ArrayList<Area> areavFtoB = new ArrayList<Area>(); 
    ArrayList<Area> areavBtoF = new ArrayList<Area>();    
    Area areacLtoR = new Area();
    Area areacRtoL = new Area();
    Area areacFtoB = new Area();
    Area areacBtoF = new Area();
    public Hinhchieu(Room r, ArrayList<Camera> listcam,ArrayList<Obstacle> listvat){
        this.r = r;
        this.listcam = listcam;
        this.listvat = listvat;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setLocation(new java.awt.Point(450, 300));

        jButton1.setText("Up to down");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Left to right");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Right to left");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("Front to behind");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setText("Behind to front");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(230, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        CamUtoD g1 = new CamUtoD();
//        this.setSize(800, 800);
        this.setTitle("Camera");
        this.setLocationRelativeTo(null);
        this.add(g1);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        Room newroom = new Room(r.getLength(),r.getWidth(),r.getHeight());
        newroom.setLength(r.getLength()*20);
        newroom.setWidth(r.getWidth()*20);
        newroom.setHeight(r.getHeight()*20); 
        for(Camera t: listcam)
        {
            Camera newcam = new Camera(t.getX(),t.getY(),t.getZ(),t.getAngle1(),t.getAngle2(),r);
            newcam.setX(t.getX()*20);
            newcam.setY(t.getY()*20);
            newcam.setZ(t.getZ()*20);
            if(newcam.getWall() == 1)
            {
                point cam_hc = new point(newroom.getLength(),newcam.getY(),newcam.getZ());
                point hc1 = new point(newroom.getLength(),newcam.getY()-newroom.getLength()*Math.tan(Math.toRadians(newcam.getAngle1()/2)),newcam.getZ());
                point hc2 = new point(newroom.getLength(),newcam.getY(),newcam.getZ() - newroom.getLength()*Math.tan(Math.toRadians(newcam.getAngle2()/2)));
                point td = new point((hc1.getX()+hc2.getX())/2,(hc1.getY()+hc2.getY())/2,(hc1.getZ()+hc2.getZ())/2);

                point diemdau = new point(2*td.getX()-cam_hc.getX(),2*td.getY()-cam_hc.getY(),2*td.getZ()-cam_hc.getZ());
                double w = newroom.getLength()*Math.tan(Math.toRadians(newcam.getAngle1())/2) * 2;
                double h = newroom.getLength()*Math.tan(Math.toRadians(newcam.getAngle2())/2) * 2;
//                System.out.println(newroom.getLength()+" "+newroom.getWidth()+" "+newroom.getHeight());

                Area camera = new Area(new Rectangle2D.Double(diemdau.getY(), diemdau.getZ(), w, h));
                areacLtoR = camera;
                Area cam_tmp =(Area) camera.clone();
                point cam_p = new point(newcam.getX(),newcam.getY(),newcam.getZ());

                for(Obstacle vat: listvat)
                {
                    point pa = new point(vat.getBottom1().get(0)*20,vat.getBottom1().get(1)*20,vat.getBottom1().get(2)*20);
                    point pb = new point();

                    pb.setX(newroom.getLength());
                    double k = (pa.getX()-cam_p.getX())/(pb.getX()-cam_p.getX());

                    pb.setY((((pa.getY()-cam_p.getY())/k)+cam_p.getY()));
                    pb.setZ((((pa.getZ()-cam_p.getZ())/k)+cam_p.getZ()));
                    
                    double w1 = Math.abs(vat.getBottom4().get(1) - vat.getBottom1().get(1));
                    double h1 = Math.abs(vat.getTop1().get(2) - vat.getBottom1().get(2));
                    double w_hc = w1/k *20;
                    double h_hc = h1/k *20;
                    
                    point dx = new point(newroom.getLength(),pb.getY(),newroom.getHeight()/2);
                    point dx1 = new point(2*dx.getX()-pb.getX(),2*dx.getY()-pb.getY(),2*dx.getZ()-pb.getZ());
                    System.out.println(dx1.getX()+" "+dx1.getY()+" "+dx1.getZ());
                    areavLtoR.add(new Area(new Rectangle2D.Double(dx1.getY(), dx1.getZ()-h_hc, w_hc, h_hc)));


//                    break;
                }
//                System.out.println(y +" "+z);

            }
        
        }
        JFrame cam = new JFrame();
        cam.setSize(600,600);
        cam.setTitle("Camera");
        cam.setLocationRelativeTo(null);
       if(areavLtoR.size()!=0)
       {
           CamLtoR g1 = new CamLtoR(areavLtoR,areacLtoR);
           cam.add(g1);
           cam.setVisible(true);
       }
       else 
       {
           JOptionPane.showMessageDialog(cam,"There is no camera on this wall!","No Camera",JOptionPane.WARNING_MESSAGE);
           System.out.println("ko co cam");
       }
//       areavLtoR.removeAll(areavLtoR);
//       areacLtoR = null;
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        Room newroom = new Room(r.getLength(),r.getWidth(),r.getHeight());
        newroom.setLength(r.getLength()*20);
        newroom.setWidth(r.getWidth()*20);
        newroom.setHeight(r.getHeight()*20); 
//        for(Camera t: listcam)
//        {
//            t.setX(t.getX()*20);
//            t.setY(t.getY()*20);
//            t.setZ(t.getZ()*20);
//        }
        for(Camera t: listcam)
        {
            Camera newcam = new Camera(t.getX(),t.getY(),t.getZ(),t.getAngle1(),t.getAngle2(),r);
            newcam.setX(t.getX()*20);
            newcam.setY(t.getY()*20);
            newcam.setZ(t.getZ()*20);
            if(newcam.getWall() == 3)
            {
                point cam_hc = new point(0,newcam.getY(),newcam.getZ());
                point hc1 = new point(0,newcam.getY()-newroom.getLength()*Math.tan(Math.toRadians(newcam.getAngle1())/2),newcam.getZ());
                point hc2 = new point(0,newcam.getY(),newcam.getZ() - newroom.getLength()*Math.tan(Math.toRadians(newcam.getAngle2())/2));
                point td = new point((hc1.getX()+hc2.getX())/2,(hc1.getY()+hc2.getY())/2,(hc1.getZ()+hc2.getZ())/2);
                System.out.println(td.getY() +" "+ td.getZ());
                point diemdau = new point(2*td.getX()-cam_hc.getX(),2*td.getY()-cam_hc.getY(),2*td.getZ()-cam_hc.getZ());
                double w = newroom.getLength()*Math.tan(Math.toRadians(newcam.getAngle1())/2) * 2;
                double h = newroom.getLength()*Math.tan(Math.toRadians(newcam.getAngle2())/2) * 2;
                Area camera = new Area(new Rectangle2D.Double(diemdau.getY(), diemdau.getZ(), w, h));
                areacRtoL = camera;
                point cam_p = new point(newcam.getX(),newcam.getY(),newcam.getZ());
                
                for(Obstacle vat: listvat)
                {
                    point pa = new point(vat.getBottom2().get(0)*20,vat.getBottom2().get(1)*20,vat.getBottom2().get(2)*20);
                    point pb = new point();
                    System.out.println(pa.getX()+" "+pa.getY()+" "+pa.getZ());
                    pb.setX(0);
                    double k = (pa.getX()-cam_p.getX())/(pb.getX()-cam_p.getX());
                    System.out.println("k = "+k);
                    pb.setY((((pa.getY()-cam_p.getY())/k)+cam_p.getY()));
                    pb.setZ((((pa.getZ()-cam_p.getZ())/k)+cam_p.getZ()));
                    System.out.println(pb.getX()+" "+pb.getY()+" "+pb.getZ());
                    double w1 = Math.abs(vat.getBottom3().get(1) - vat.getBottom2().get(1));
                    double h1 = Math.abs(vat.getTop1().get(2) - vat.getBottom1().get(2));
                    double w_hc = w1/k *20;
                    double h_hc = h1/k *20;
                    
                    point dx = new point(0,pb.getY(),newroom.getHeight()/2);

                    point dx1 = new point(2*dx.getX()-pb.getX(),2*dx.getY()-pb.getY(),2*dx.getZ()-pb.getZ());
 
                    areavRtoL.add(new Area(new Rectangle2D.Double(dx1.getY(), dx1.getZ()-h_hc, w_hc, h_hc)));


//                    break;
                }
//                System.out.println(y +" "+z);

            }
            
        }
        
        JFrame cam = new JFrame();

       if(areavRtoL.size()!=0)
       {
           System.out.println("RtoL");
           cam.setVisible(true);
           CamRtoL g1 = new CamRtoL(areavRtoL,areacRtoL);
           cam.add(g1);
//           g1.areavat = new ArrayList<>();
//           g1.areavat.addAll(areavRtoL);
//           System.out.println(g1.areavat.size());
//           g1.areacam = areacRtoL;
       }
       
       else 
       {
           JOptionPane.showMessageDialog(cam,"There is no camera on this wall!","No Camera",JOptionPane.WARNING_MESSAGE);
           System.out.println("ko co cam");
       }
       cam.setSize(600,600);
        cam.setTitle("Camera");
        cam.setLocationRelativeTo(null);
//        areavRtoL.removeAll(areavRtoL);
//        areacRtoL = null;
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        Room newroom = new Room(r.getLength(),r.getWidth(),r.getHeight());
        newroom.setLength(r.getLength()*20);
        newroom.setWidth(r.getWidth()*20);
        newroom.setHeight(r.getHeight()*20); 

        for(Camera t: listcam)
        {
            Camera newcam = new Camera(t.getX(),t.getY(),t.getZ(),t.getAngle1(),t.getAngle2(),r);
            newcam.setX(t.getX()*20);
            newcam.setY(t.getY()*20);
            newcam.setZ(t.getZ()*20);
            if(newcam.getWall() == 4)
            {
                point cam_hc = new point(newcam.getX(),0,newcam.getZ());
                point hc1 = new point(newcam.getX()-newroom.getWidth()*Math.tan(Math.toRadians(newcam.getAngle1())/2),0,newcam.getZ());
                point hc2 = new point(newcam.getX(),0,newcam.getZ() - newroom.getWidth()*Math.tan(Math.toRadians(newcam.getAngle2())/2));
                point td = new point((hc1.getX()+hc2.getX())/2,(hc1.getY()+hc2.getY())/2,(hc1.getZ()+hc2.getZ())/2);
                System.out.println(td.getX() +" "+ td.getZ());
                point diemdau = new point(2*td.getX()-cam_hc.getX(),2*td.getY()-cam_hc.getY(),2*td.getZ()-cam_hc.getZ());
                double w = newroom.getWidth()*Math.tan(Math.toRadians(newcam.getAngle1())/2) * 2;
                double h = newroom.getWidth()*Math.tan(Math.toRadians(newcam.getAngle2())/2) * 2;
                Area camera = new Area(new Rectangle2D.Double(diemdau.getY(), diemdau.getZ(), w, h));
                areacFtoB = camera;
                point cam_p = new point(newcam.getX(),newcam.getY(),newcam.getZ());
                
                for(Obstacle vat: listvat)
                {
                    point pa = new point(vat.getBottom4().get(0)*20,vat.getBottom4().get(1)*20,vat.getBottom4().get(2)*20);
                    point pb = new point();
                    System.out.println(pa.getX()+" "+pa.getY()+" "+pa.getZ());
                    pb.setY(0);
                    double k = (pa.getY()-cam_p.getY())/(pb.getY()-cam_p.getY());
                    System.out.println("k = "+k);
                    pb.setX((((pa.getX()-cam_p.getX())/k)+cam_p.getX()));
                    pb.setZ((((pa.getZ()-cam_p.getZ())/k)+cam_p.getZ()));
                    System.out.println(pb.getX()+" "+pb.getY()+" "+pb.getZ());
                    double w1 = Math.abs(vat.getBottom3().get(0) - vat.getBottom4().get(0));
                    double h1 = Math.abs(vat.getTop1().get(2) - vat.getBottom1().get(2));
                    double w_hc = w1/k *20;
                    double h_hc = h1/k *20;
                    
                    point dx = new point(pb.getX(),0,newroom.getHeight()/2);

                    point dx1 = new point(2*dx.getX()-pb.getX(),2*dx.getY()-pb.getY(),2*dx.getZ()-pb.getZ());
                    System.out.println(dx1.getX() +" "+ dx1.getY()+" "+ dx1.getZ()+" "+w_hc+" "+h_hc);
                    areavFtoB.add(new Area(new Rectangle2D.Double(dx1.getX(), dx1.getZ()-h_hc, w_hc, h_hc)));


//                    break;
                }
//                System.out.println(y +" "+z);
                
            }
        }
        JFrame cam = new JFrame();
        if(areavFtoB.size()!=0)
        {
           System.out.println("FtoB");
           cam.setVisible(true);
           CamFtoB g1 = new CamFtoB(areavFtoB,areacFtoB);
           cam.add(g1);
//           g1.areavat = new ArrayList<>();
//           g1.areavat.addAll(areavRtoL);
//           System.out.println(g1.areavat.size());
//           g1.areacam = areacRtoL;
       }
       
       else 
       {
           JOptionPane.showMessageDialog(cam,"There is no camera on this wall!","No Camera",JOptionPane.WARNING_MESSAGE);
           System.out.println("ko co cam");
       }
       cam.setSize(800,600);
        cam.setTitle("Camera");
        cam.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        Room newroom = new Room(r.getLength(),r.getWidth(),r.getHeight());
        newroom.setLength(r.getLength()*20);
        newroom.setWidth(r.getWidth()*20);
        newroom.setHeight(r.getHeight()*20); 

        for(Camera t: listcam)
        {
            Camera newcam = new Camera(t.getX(),t.getY(),t.getZ(),t.getAngle1(),t.getAngle2(),r);
            newcam.setX(t.getX()*20);
            newcam.setY(t.getY()*20);
            newcam.setZ(t.getZ()*20);
            if(newcam.getWall() == 2)
            {
                point cam_hc = new point(newcam.getX(),newroom.getWidth(),newcam.getZ());
                point hc1 = new point(newcam.getX()-newroom.getWidth()*Math.tan(Math.toRadians(newcam.getAngle1())/2),newroom.getWidth(),newcam.getZ());
                point hc2 = new point(newcam.getX(),newroom.getWidth(),newcam.getZ() - newroom.getWidth()*Math.tan(Math.toRadians(newcam.getAngle2())/2));
                point td = new point((hc1.getX()+hc2.getX())/2,(hc1.getY()+hc2.getY())/2,(hc1.getZ()+hc2.getZ())/2);
                System.out.println(td.getX() +" "+ td.getZ());
                point diemdau = new point(2*td.getX()-cam_hc.getX(),2*td.getY()-cam_hc.getY(),2*td.getZ()-cam_hc.getZ());
                double w = newroom.getWidth()*Math.tan(Math.toRadians(newcam.getAngle1())/2) * 2;
                double h = newroom.getWidth()*Math.tan(Math.toRadians(newcam.getAngle2())/2) * 2;
                Area camera = new Area(new Rectangle2D.Double(diemdau.getY(), diemdau.getZ(), w, h));
                areacBtoF = camera;
                point cam_p = new point(newcam.getX(),newcam.getY(),newcam.getZ());
                
                for(Obstacle vat: listvat)
                {
                    point pa = new point(vat.getBottom1().get(0)*20,vat.getBottom1().get(1)*20,vat.getBottom1().get(2)*20);
                    point pb = new point();
                    System.out.println(pa.getX()+" "+pa.getY()+" "+pa.getZ());
                    pb.setY(newroom.getWidth());
                    double k = (pa.getY()-cam_p.getY())/(pb.getY()-cam_p.getY());
                    System.out.println("k = "+k);
                    pb.setX((((pa.getX()-cam_p.getX())/k)+cam_p.getX()));
                    pb.setZ((((pa.getZ()-cam_p.getZ())/k)+cam_p.getZ()));
                    System.out.println(pb.getX()+" "+pb.getY()+" "+pb.getZ());
                    double w1 = Math.abs(vat.getBottom3().get(0) - vat.getBottom4().get(0));
                    double h1 = Math.abs(vat.getTop1().get(2) - vat.getBottom1().get(2));
                    double w_hc = w1/k *20;
                    double h_hc = h1/k *20;
                    
                    point dx = new point(pb.getX(),newroom.getWidth(),newroom.getHeight()/2);

                    point dx1 = new point(2*dx.getX()-pb.getX(),2*dx.getY()-pb.getY(),2*dx.getZ()-pb.getZ());
                    System.out.println(dx1.getX() +" "+ dx1.getY()+" "+ dx1.getZ()+" "+w_hc+" "+h_hc);
                    areavBtoF.add(new Area(new Rectangle2D.Double(dx1.getX(), dx1.getZ()-h_hc, w_hc, h_hc)));


//                    break;
                }
//                System.out.println(y +" "+z);
                
            }
        }
        JFrame cam = new JFrame();
        if(areavBtoF.size()!=0)
        {
           System.out.println("FtoB");
           cam.setVisible(true);
           CamBtoF g1 = new CamBtoF(areavBtoF,areacBtoF);
           cam.add(g1);
//           g1.areavat = new ArrayList<>();
//           g1.areavat.addAll(areavRtoL);
//           System.out.println(g1.areavat.size());
//           g1.areacam = areacRtoL;
       }
       
       else 
       {
           JOptionPane.showMessageDialog(cam,"There is no camera on this wall!","No Camera",JOptionPane.WARNING_MESSAGE);
           System.out.println("ko co cam");
       }
       cam.setSize(800,600);
        cam.setTitle("Camera");
        cam.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButton5MouseClicked

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    // End of variables declaration//GEN-END:variables
}
